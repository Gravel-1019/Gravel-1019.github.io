<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6笔记</title>
    <url>/2024/10/04/ES6/</url>
    <content><![CDATA[<h3 id="块级绑定"><a href="#块级绑定" class="headerlink" title="块级绑定"></a>块级绑定</h3><h5 id="用var定义变量的问题"><a href="#用var定义变量的问题" class="headerlink" title="用var定义变量的问题"></a>用var定义变量的问题</h5><ul>
<li><p>允许重复的变量声明：导致数据被覆盖</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//很多代码</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//a变量被覆盖，难以排查错误</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>变量提升：怪异的数据访问、闭包问题</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>()&lt;<span class="number">0.5</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按照逻辑，只有随机数小于0.5才会申明变量a</span></span><br><span class="line"><span class="comment">//但是由于变量提升，无论哪个分支都会声明变量a</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>全局变量挂载到全局对象：全局对象成员污染问题</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = &#x27;abc&#x27;;</span><br><span class="line">console.log(window.a)</span><br><span class="line">//变量被挂在到全局对象(浏览器中为window)，造成污染</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>为了解决var声明变量的问题，es6中引入let关键字</p>
<h5 id="let定义变量"><a href="#let定义变量" class="headerlink" title="let定义变量"></a>let定义变量</h5><ul>
<li><p>同作用域不允许重复声明</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>不存在变量提升</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)z</span><br></pre></td></tr></table></figure></div>

<p><em>在底层实现上，let声明的变量也会有提升，提升后会放入“暂时性死区”，如果访问的变量位于暂时性死区，则会报错”Cannot access ‘变量名’ before initialization”当代码运行到该变量的声明语句，会将其从暂时性死区移除</em></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;divButtons&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123; </span><br><span class="line">    <span class="keyword">var</span> button = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">    button.<span class="property">innerHTML</span> = <span class="string">&quot;按钮&quot;</span> + i;</span><br><span class="line">    div.<span class="title function_">appendChild</span>(button);</span><br><span class="line">    button.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//实现点击按钮输出对应数字的功能</span></span><br></pre></td></tr></table></figure></div>

<p>在循环中，用let声明的循环变量，会特殊处理，每次进入循环体，都会开启一个新的作用域，并且将循环变量绑定到该作用域（每次循环使用的是全新的循环变量）</p>
</li>
<li><p>全局变量不会挂载到全局对象</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>)<span class="comment">//undefinde</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="const定义常量"><a href="#const定义常量" class="headerlink" title="const定义常量"></a>const定义常量</h5><p>const和let完全相同，仅在于用const声明的变量，必须在声明时赋值，不可以重新赋值</p>
<p>开发中，应该尽量使用const来声明变量，以保证变量的值不会随意篡改</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>编程笔记</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
