<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6 初探：现代 JavaScript 的新特性</title>
    <url>/2024/10/04/ES6%20%E5%88%9D%E6%8E%A2%EF%BC%9A%E7%8E%B0%E4%BB%A3%20JavaScript%20%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p><em>Promise部分见其他文章</em></p>
<h3 id="块级绑定"><a href="#块级绑定" class="headerlink" title="块级绑定"></a>块级绑定</h3><h5 id="用var定义变量的问题"><a href="#用var定义变量的问题" class="headerlink" title="用var定义变量的问题"></a>用var定义变量的问题</h5><ul>
<li><p>允许重复的变量声明：导致数据被覆盖</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//很多代码</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//a变量被覆盖，难以排查错误</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>变量提升：怪异的数据访问、闭包问题</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>()&lt;<span class="number">0.5</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按照逻辑，只有随机数小于0.5才会申明变量a</span></span><br><span class="line"><span class="comment">//但是由于变量提升，无论哪个分支都会声明变量a</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>全局变量挂载到全局对象：全局对象成员污染问题</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = &#x27;abc&#x27;;</span><br><span class="line">console.log(window.a)</span><br><span class="line">//变量被挂在到全局对象(浏览器中为window)，造成污染</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>为了解决var声明变量的问题，es6中引入let关键字</p>
<h5 id="let定义变量"><a href="#let定义变量" class="headerlink" title="let定义变量"></a>let定义变量</h5><ul>
<li><p>同作用域不允许重复声明</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>不存在变量提升</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)z</span><br></pre></td></tr></table></figure></div>

<p><em>在底层实现上，let声明的变量也会有提升，提升后会放入“暂时性死区”，如果访问的变量位于暂时性死区，则会报错”Cannot access ‘变量名’ before initialization”当代码运行到该变量的声明语句，会将其从暂时性死区移除</em></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;divButtons&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123; </span><br><span class="line">    <span class="keyword">var</span> button = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">    button.<span class="property">innerHTML</span> = <span class="string">&quot;按钮&quot;</span> + i;</span><br><span class="line">    div.<span class="title function_">appendChild</span>(button);</span><br><span class="line">    button.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//实现点击按钮输出对应数字的功能</span></span><br></pre></td></tr></table></figure></div>

<p>在循环中，用let声明的循环变量，会特殊处理，每次进入循环体，都会开启一个新的作用域，并且将循环变量绑定到该作用域（每次循环使用的是全新的循环变量）</p>
</li>
<li><p>全局变量不会挂载到全局对象</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>)<span class="comment">//undefinde</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="const定义常量"><a href="#const定义常量" class="headerlink" title="const定义常量"></a>const定义常量</h5><p>const和let完全相同，仅在于用const声明的变量，必须在声明时赋值，不可以重新赋值</p>
<p>开发中，应该尽量使用const来声明变量，以保证变量的值不会随意篡改</p>
<h3 id="字符串和正则表达式"><a href="#字符串和正则表达式" class="headerlink" title="字符串和正则表达式"></a>字符串和正则表达式</h3><h5 id="码点和码元"><a href="#码点和码元" class="headerlink" title="码点和码元"></a>码点和码元</h5><p>早期由于存储空间宝贵，Unicode使用16位二进制来储存文字。我们将一个16位的二进制编码叫做一个码元（Code Unit）</p>
<p>由于技术的发展，Unicode对文字编码进行扩展，将某些文字扩展到32位（占用两个码元），并且将某个文字对应的二进制数字叫做码点（Code Point）</p>
<p>在JavaScript中获取字符串长度或者使用正则匹配字符都是按照码元来匹配的</p>
<p>es6为了解决困扰，给字符串提供了方法：codePointAt()，给正则表达式添加flag:u，添加该配置使用码点匹配</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取码点方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">is32bit</span>(<span class="params">char,i</span>)&#123;</span><br><span class="line">    <span class="comment">//如果码点大于16为二进制最大值则其是32位</span></span><br><span class="line">    <span class="keyword">return</span> char.<span class="title function_">codePointAt</span>(i) &gt; <span class="number">0xffff</span>;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLenghtOfCodePoint</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; str.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="comment">//i在索引码元</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">is32bit</span>(str,i))&#123;</span><br><span class="line">            <span class="comment">//当前字符串占用两个码元</span></span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">        len++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="更多的字符串api"><a href="#更多的字符串api" class="headerlink" title="更多的字符串api"></a>更多的字符串api</h5><ul>
<li><p>includes：判断字符串中是否包含指定的子字符串</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">text.<span class="title function_">includes</span>(<span class="string">&quot;字符串&quot;</span>,开始查找下标);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>startWith：判断字符串是否以指定的字符串开始</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">text.<span class="title function_">startWith</span>(<span class="string">&quot;字符串&quot;</span>,开始查找下标);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>endWith：判断字符串是否以指定的字符串结尾</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">text.<span class="title function_">endtWith</span>(<span class="string">&quot;字符串&quot;</span>,开始查找下标);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>repeat()：将字符串重复指定的次数返回新字符串</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">text.repeat(次数);</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="正则中的粘连标记"><a href="#正则中的粘连标记" class="headerlink" title="正则中的粘连标记"></a>正则中的粘连标记</h5><p> 标记名：y</p>
<p> 含义：匹配时完全按照正则对象中lastIndex位置开始匹配，并且匹配的位置必须在lastIndex位置。</p>
<h5 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h5><p>es6中提供了模板字符串的书写，可以非常方便的进行拼接和换行，模板字符串符号为&#96;&#96;</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">`我是一个模板字符串`</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">`我是一个<span class="subst">$&#123;JS表达式&#125;</span>能拼接表达式的字符串`</span></span><br></pre></td></tr></table></figure></div>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h5 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h5><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">a,b=<span class="number">1</span>,c=<span class="number">2</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure></div>

<p>调用函数，如果不给b，c传对应的参数（或传ubdefined），则b，c为默认值</p>
<h5 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h5><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="comment">//args收集所有参数，形成的一个数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用细节：</p>
<ul>
<li>一个函数只能出现一个剩余函数</li>
<li>剩余参数必须是最后一个参数</li>
</ul>
<h5 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h5><ul>
<li><p>展开数组</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...arr,<span class="number">6</span>) <span class="comment">// 可以添加新的元素</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>深复制数组</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr]</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>展开对象（ES7）</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;gravel&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">17</span>,</span><br><span class="line">    <span class="attr">love</span>:<span class="string">&quot;Hacking&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">    ...obj1,</span><br><span class="line">    <span class="attr">love</span>: <span class="string">&quot;Programming&quot;</span><span class="comment">//可以更改属性或添加新的属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><p>箭头函数是一个函数表达式，理论上任何使用函数表达式的场景都可以使用箭头函数</p>
<p>箭头函数中的this指向取决于箭头函数定义位置的this指向，而与如何调用无关 </p>
<p>箭头函数没有原型</p>
<p>箭头函数不能作为构造函数使用</p>
<ul>
<li><p>语法	</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">(参数<span class="number">1</span>,参数<span class="number">2</span>，...) =&gt; &#123;</span><br><span class="line">	<span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>只有一个参数，可以省略参数的括号 </p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">参数=&gt;&#123;</span><br><span class="line">   <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>只有一条返回语句可以省略大括号和return关键字</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">参数 =&gt; 返回值</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h5 id="新增对象字面量语法"><a href="#新增对象字面量语法" class="headerlink" title="新增对象字面量语法"></a>新增对象字面量语法</h5><ul>
<li><p>如果对象字面量初始化时，成员的名称来自于一个变量，并且和变量的名称相同，则可以进行简写</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createUser</span>(<span class="params">loginId,loginPwd,nickName</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        loginId, </span><br><span class="line">        loginPwd,</span><br><span class="line">        nickName,</span><br><span class="line">        <span class="attr">id</span>: <span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 简化下面的写法</span></span><br><span class="line">    <span class="comment">// return&#123;</span></span><br><span class="line">    <span class="comment">//     loginId:loginId,</span></span><br><span class="line">    <span class="comment">//     loginPwd:loginPwd,</span></span><br><span class="line">    <span class="comment">//     nickName:nickName,</span></span><br><span class="line">    <span class="comment">//     id: Math.random()</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>方法速写</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;gravel&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    <span class="comment">// sayHello:function()&#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>计算属性名，[表达式]:”value”，属性名为表达式的值</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> prop = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    [prop]:<span class="string">&quot;gravel&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="Object的新增api"><a href="#Object的新增api" class="headerlink" title="Object的新增api"></a>Object的新增api</h5><ul>
<li><p>Object.is：判断两个对象是否相等，与&#x3D;&#x3D;&#x3D;基本相等，除了一下情况：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>,<span class="title class_">NaN</span>))<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>,-<span class="number">0</span>))<span class="comment">//false</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Object.assign：用于混合对象</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user1=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;gravel&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">16</span>,</span><br><span class="line">    <span class="attr">love</span>:<span class="string">&quot;Hacking&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user2=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;QWQ&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">17</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(user1,user2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123; name: &#x27;QWQ&#x27;, age: 17, love: &#x27;Hacking&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj===user1); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></div>

<p>Object.assign会修改第一个参数（obj&#x3D;&#x3D;&#x3D;user1），建议使用展开运算符或者第一个参数传空对象</p>
</li>
</ul>
<h5 id="定义类的语法糖"><a href="#定义类的语法糖" class="headerlink" title="定义类的语法糖"></a>定义类的语法糖</h5><p>es6之前js通过原型来实现面向对象的开发，十分繁琐，es6引入了新的定义类的方法</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span>,...</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.参数<span class="number">1</span> = 参数<span class="number">1</span>;</span><br><span class="line">        <span class="variable language_">this</span>.参数<span class="number">2</span> = 参数<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    方法()&#123;</span><br><span class="line">        <span class="comment">//代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="类的其他新特性"><a href="#类的其他新特性" class="headerlink" title="类的其他新特性"></a>类的其他新特性</h5><ul>
<li><p>可计算的属性表达式，属性的名字可以通过表达式计算得来</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> prop = <span class="string">&quot;printName&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    [prop]()&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">User</span>().<span class="title function_">printName</span>()<span class="comment">//namew</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>静态成员：类中定义定义属性时加上static关键字，静态成员通过类来调用而不是对象</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="property">a</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>匿名类：在JS中，类的本质还是函数</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="keyword">class</span>&#123;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h5><p>如果两个类，如果可以描述为“B是A”，则A和B形成继承关系。如果A是B的父类，B自动拥有A中的所有实例成员</p>
<ul>
<li>继承中涉及的关键字：<ul>
<li>extends：继承，用于类的定义</li>
<li>super：直接当作函数调用，表示父类的构造函数 ;当作对象调用，表示父类的原型</li>
</ul>
</li>
</ul>
<p>es6要求，如果子类定义constructor，必须在constructor的第一行手动调用父类的构造函数</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">type,name,age,sex</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;eat&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age,sex</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(<span class="string">&#x27;Dog&#x27;</span>,name,age,sex);<span class="comment">//super当作函数调用</span></span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">eat</span>()<span class="comment">//当作对象调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h3><h5 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h5><p>解构：es6的一种语法规则，将一个对象或数组的某个属性提取到某个变量中</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;gravel&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">17</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">    <span class="attr">address</span>:&#123;</span><br><span class="line">        <span class="attr">province</span>:<span class="string">&quot;浙江&quot;</span>,</span><br><span class="line">        <span class="attr">city</span>:<span class="string">&quot;杭州&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> name,age,sex,address;</span><br><span class="line">(&#123;name,age,sex,address&#125; = user);<span class="comment">//括号为了防止编辑器标红</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>解构中使用默认值</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;同名变量=默认值&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>非同名属性解构</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;属性名:变量名&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h5><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用解构赋值的方式从数组中获取成员</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前面的 [] 表示要从 arr 这个数组中获取成员了</span></span><br><span class="line"><span class="comment">// a b c 分别对应这数组中的索引 0 1 2</span></span><br><span class="line"><span class="comment">// arr 必须是一个数组</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr</span><br><span class="line"></span><br><span class="line"><span class="comment">//解构多维数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>]]]</span><br><span class="line"><span class="keyword">let</span> [a,b,[c,d,[e]]] = arr</span><br><span class="line"><span class="comment">//解构数组只需要将数组中的值替换成变量，就可以通过变量或取</span></span><br></pre></td></tr></table></figure></div>

<h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><h5 id="普通符号"><a href="#普通符号" class="headerlink" title="普通符号"></a>普通符号</h5><p>符号：es6新增的一个数据类型，它通过使用函数<code>Symbol(描述信息)</code>来创建</p>
<p>符号设计的初衷是为了给对象设置私有属性</p>
<p>符号具有以下特点：</p>
<ul>
<li>没有字面量</li>
<li>使用typeof得到的类型是symbol</li>
<li>每次创建的符号永远不相等</li>
<li>符号可以作为属性名，这种属性称之为符号属性</li>
<li>符号属性无法枚举</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> symPassword = <span class="title class_">Symbol</span>(<span class="string">&#x27;password&#x27;</span>);  <span class="comment">// 私有符号</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">setPassword</span>: <span class="keyword">function</span>(<span class="params">pwd</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>[symPassword] = pwd;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">getPassword</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>[symPassword];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">user.<span class="title function_">setPassword</span>(<span class="string">&#x27;secret123&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="title function_">getPassword</span>()); <span class="comment">// secret123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(user));  <span class="comment">// []  无法直接枚举到 password</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h5 id="共享符号"><a href="#共享符号" class="headerlink" title="共享符号"></a>共享符号</h5><p>根据某个符号描述能够得到同一个符号</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;符号描述&quot;</span>) <span class="comment">//获取共享符号</span></span><br><span class="line"><span class="keyword">const</span> syb1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;符号&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> syb2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;符号&quot;</span>)<span class="comment">//syb1和syb2是同一个符号</span></span><br></pre></td></tr></table></figure></div>

<h5 id="知名符号"><a href="#知名符号" class="headerlink" title="知名符号"></a>知名符号</h5><p>知名符号是一些具有特殊含义的共享符号，通过Symbol的静态属性得到</p>
<p>这里讲一个知名符号：Symbol.hasInstance</p>
<p>该符号用于定义构造函数的静态成员，它将影响instanceof的判定</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">obj <span class="keyword">instanceof</span> A</span><br><span class="line"><span class="comment">//等效于</span></span><br><span class="line">A[<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](obj)</span><br></pre></td></tr></table></figure></div>



<h3 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h3><h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><p>JS规定，如果一个对象有next方法，并且该方法返回一个对象，格式为<code>&#123;value:值 ，done:是否迭代完成&#125;</code></p>
<ul>
<li>next方法：用于得到下一个数据</li>
<li>返回的对象<ul>
<li>value：下一个数据的值</li>
<li>done：布尔值，是否迭代完成</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="comment">//迭代数组arr</span></span><br><span class="line"><span class="keyword">const</span> iterator = &#123;</span><br><span class="line">    <span class="attr">i</span>:<span class="number">0</span>,<span class="comment">//当前数组下标</span></span><br><span class="line">    <span class="title function_">next</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">value</span>:arr[<span class="variable language_">this</span>.<span class="property">i</span>++],</span><br><span class="line">            <span class="attr">done</span>:<span class="variable language_">this</span>.<span class="property">i</span> &gt;= arr.<span class="property">length</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h5><p>es6规定。如果一个对象具有知名符号属性<code>Symbol.iterator</code> ，并且属性值是一个迭代器创建函数，则该对象是可迭代的，比如数组就是一个可迭代对象</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="comment">//可迭代对象</span></span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="title function_">next</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>&#123;</span><br><span class="line">                    <span class="attr">value</span>:<span class="number">1</span>,</span><br><span class="line">                    <span class="attr">done</span>:<span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>迭代数组：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"><span class="keyword">const</span> iterator = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line">iterator.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure></div>

<h5 id="for-of循环"><a href="#for-of循环" class="headerlink" title="for-of循环"></a>for-of循环</h5><p>for-of循环用于遍历可迭代对象，格式如下:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">    <span class="comment">//iterable：可迭代对象</span></span><br><span class="line">    <span class="comment">//item：每次迭代得到的数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h5><p>生成器是一个通过构造函数Generator创建的对象，生成器既是一个迭代器，同时又是一个可迭代对象</p>
<p>生成器的创建，必须使用生成器函数</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是一个生成器函数，该函数一定返回一个生成器</span></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">method</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure></div>

<p>生成器函数内部是为了给生成器的每次迭代提供数据</p>
<p>每次调用生成器的next方法将导致生成器函数运行到下一个yield关键字位置</p>
<p>yield是一个关键字，只能在生成器内部使用，表达产生一个迭代数据</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是一个生成器函数，该函数一定返回一个生成器</span></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a3aa&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> generator = <span class="title function_">test</span>();</span><br></pre></td></tr></table></figure></div>

<p><em><strong>一些感慨：怀念当时学python时学生成器的感觉，当时听得半懂不懂的，现在有融会贯通的感觉了QWQ</strong></em></p>
<h3 id="更多集合类型"><a href="#更多集合类型" class="headerlink" title="更多集合类型"></a>更多集合类型</h3><h5 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h5><p>set用于存放不重复的数据</p>
<p>创建set集合：<code>new Set();</code></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Set</span>(可迭代对象);</span><br><span class="line"><span class="comment">//创建一个具有初始内容的set集合，内容来自可迭代对象每次迭代的结果，比如new Set([1,2,3,4,5]);</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>添加数据</p>
<ul>
<li><code>add(数据)</code>，添加数据到集合末尾，如果数据已存在，则不进行操作（通过Object.is 判断，但是+0和-0相等）</li>
</ul>
</li>
<li><p>判断是否存在对应数据</p>
<ul>
<li><code>has(数据)</code>：判断set中是否存在数据的</li>
</ul>
</li>
<li><p>删除数据</p>
<ul>
<li><code>delete(数据)</code>：删除匹配的数据，返回是否删除成功</li>
</ul>
</li>
<li><p>清空集合</p>
<ul>
<li><code>clear()</code></li>
</ul>
</li>
<li><p>获取元素数量</p>
<ul>
<li><code>set对象.size</code></li>
</ul>
</li>
<li><p>与数组相互转化</p>
<ul>
<li><pre><code class="javascript">const s = new Set([1,2,3,4,5]);//arr =&gt; set
const arr = [...s]//set =&gt; arr
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 遍历set</span><br><span class="line"></span><br><span class="line">  - for-of</span><br><span class="line"></span><br><span class="line">    ```javascript</span><br><span class="line">    const s = new Set([1,2,3,4,5]);</span><br><span class="line">    for (const item of s) &#123;</span><br><span class="line">        console.log(item);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
</code></pre>
</li>
<li><p>forEach（set集合没有下表，所以forEach第二个参数和第一个一样）</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line">s.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<h5 id="map集合"><a href="#map集合" class="headerlink" title="map集合"></a>map集合</h5><p>map集合用于存储多个键值对数据 </p>
<ul>
<li><p>创建空map</p>
<ul>
<li><pre><code class="javascript">new Map();
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 创建一个具有初始内容的map，初始内容来自可迭代对象每一次迭代的结果，要求每一次迭代的结果必须是一个长度为2的数组，数组的第一项表示键，第二项表示值</span><br><span class="line"></span><br><span class="line">  - ```javascript</span><br><span class="line">    new Map(可迭代对象);</span><br><span class="line">    const mp = new Map([[&quot;a&quot;,1],[&quot;b&quot;,2],[&quot;C&quot;,3]]);</span><br></pre></td></tr></table></figure></div>
</code></pre>
</li>
</ul>
</li>
<li><p>获取map中键的数量</p>
<ul>
<li><code>Map对象.size</code></li>
</ul>
</li>
<li><p>设置一个键值对，键值可以是任何类型，键不存在添加一项，键存在覆盖之前的值</p>
<ul>
<li><code>Map对象.set(键,值)</code></li>
</ul>
</li>
<li><p>根据键获得值</p>
<ul>
<li><code>Map对象.get(键)</code></li>
</ul>
</li>
<li><p>判断某个键是否存在</p>
<ul>
<li><code>has(键)</code></li>
</ul>
</li>
<li><p>删除指定的键&#96;</p>
<ul>
<li><code>delete(键)</code></li>
</ul>
</li>
<li><p>遍历</p>
<ul>
<li><p>for-of循环</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mp = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&quot;a&quot;</span>,<span class="number">1</span>],[<span class="string">&quot;b&quot;</span>,<span class="number">2</span>],[<span class="string">&quot;C&quot;</span>,<span class="number">3</span>]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> mp) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<h3 id="代理与反射"><a href="#代理与反射" class="headerlink" title="代理与反射"></a>代理与反射</h3><h5 id="Reflect反射"><a href="#Reflect反射" class="headerlink" title="Reflect反射"></a>Reflect反射</h5><p>Reflect是一个内置的JS对象，提供方法让开发者通过调用这些方法访问一些JS底层功能</p>
<p>比如这段代码：<code>obj.a = 10</code>中的&#x3D;属于底层操作，用Reflect的api能够对底层的操作进行封装 （很抽象）</p>
<p>JavaScript正在努力让开发者脱离底层的写法</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">set</span>(obj,<span class="string">&quot;a&quot;</span>,<span class="number">10</span>);<span class="comment">//相当于obj.a = 10</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>Reflect.set(target, propertyKey, value): 设置对象target的属性propertyKey的值为value，等同于给对象的属性赋值</li>
<li>Reflect.get(target, propertyKey): 读取对象target的属性propertyKey，等同于读取对象的属性值</li>
<li>Reflect.apply(target, thisArgument, argumentsList)：调用一个指定的函数，并绑定this和参数列表。等同于函数调用</li>
<li>Reflect.deleteProperty(target, propertyKey)：删除一个对象的属性</li>
<li>Reflect.defineProperty(target, propertyKey, attributes)：类似于Object.defineProperty，不同的是如果配置出现问题，返回false而不是报错</li>
<li>Reflect.construct(target, argumentsList)：用构造函数的方式创建一个对象</li>
<li>Reflect.has(target, propertyKey): 判断一个对象是否拥有一个属性</li>
<li>其他API：<a class="link"   href="https://gitee.com/link?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect" >https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects&#x2F;Reflect <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h5 id="Proxy代理"><a href="#Proxy代理" class="headerlink" title="Proxy代理"></a>Proxy代理</h5><p>代理提供了修改底层实现的方式，可以重写反射的所有方法</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line"><span class="comment">//代理一个目标对象</span></span><br><span class="line"><span class="comment">//target：目标对象</span></span><br><span class="line"><span class="comment">//handler：是一个普通对象，其中可以重写底层实现</span></span><br><span class="line"><span class="comment">//返回一个代理对象</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重写set的例子</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj,&#123;</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target,propertyKey,value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(target,propertyKey,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<hr>
<p>2024.10.07</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>编程笔记</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow刷题笔记-web入门-信息收集web1-20</title>
    <url>/2024/10/09/ctfshow%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-web%E5%85%A5%E9%97%A8-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86web1-20/</url>
    <content><![CDATA[<h5 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h5><p>题目描述：<em>开发注释未及时删除</em></p>
<p>右键，查看源代码，在注释部分得到flag</p>
<h5 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h5><p>题目描述：<em>js前台拦截 &#x3D;&#x3D;&#x3D; 无效操作</em></p>
<p>打开环境，发现右键和F12都无法查看源代码</p>
<p>直接通过快捷键：CTRL+shift+i打开开发者工具，查看源代码，在注释部分得到flag</p>
<h5 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h5><p>题目描述：<em>没思路的时候抓个包看看，可能会有意外收获</em></p>
<p>配置代理（可以在设置中配置本机代理，或者使用浏览器代理插件），打开burpsuite抓包</p>
<p>找到数据包，右键选择<code>Send to Repeater</code>，切换到Repeater页面点击发送，在响应包中获取flag</p>
<h5 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h5><p>题目描述：<em>总有人把后台地址写入robots，帮黑阔大佬们引路。</em></p>
<p>根据题目描述很明显知道这题考察的是robots.txt的信息泄露</p>
<p>在路径后拼接<code>/robots.txt</code>，得到以下内容：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /flagishere.txt</span><br></pre></td></tr></table></figure></div>

<p>访问&#x2F;flagishere.txt，得到flag</p>
<h5 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h5><p>题目描述：<em>phps源码泄露有时候能帮上忙</em></p>
<p>题目提示：<em>考点phps文件泄露，直接访问index.phps。获得flag</em></p>
<p>访问index.phps，下载源代码，获取flag</p>
<h5 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h5><p>题目描述：<em>解压源码到当前目录，测试正常，收工</em></p>
<p>打开环境啥都没有，根据提示估计是要扫描</p>
<p>这里我们用到一款目录扫描器：dirsearch</p>
<p>打开kali，下载dirsearch，并且运行</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install dirsearch #下载</span><br><span class="line">dirsearch -u url #扫描</span><br></pre></td></tr></table></figure></div>

<p>获得扫描结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[02:40:17] 200 -  486B  - /www.zip</span><br></pre></td></tr></table></figure></div>

<p>下载<a href="http://www.zip，根据提示，打开文件中的fl000g.txt，获取flag：">www.zip，根据提示，打开文件中的fl000g.txt，获取flag：</a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;flag_here&#125;</span><br></pre></td></tr></table></figure></div>

<p>一看就是假flag，所以在浏览器中访问fl000g.txt，获取flag</p>
<h5 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h5><p>题目描述：<em>版本控制很重要，但不要部署到生产环境更重要。</em></p>
<p>根据题目描述盲猜.git泄露</p>
<p>dirsearch扫描结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[02:51:48] 200 -   46B  - /.git/</span><br></pre></td></tr></table></figure></div>

<p>访问.git获得flag</p>
<h5 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h5><p>题目描述：<em>版本控制很重要，但不要部署到生产环境更重要。</em></p>
<p>题目描述和上一题一样，估计是svn泄露</p>
<p>dirsearch扫描结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[03:01:16] 200 -   46B  - /.svn/ </span><br></pre></td></tr></table></figure></div>

<p>访问.svn获取flag</p>
<h5 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h5><p>题目描述：<em>发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了</em></p>
<p>看题目描述是关于vim缓存的知识点</p>
<p>知识点1：<em><strong>vim在编辑文档的过程中如果异常退出，会产生缓存文件，同一个文件产生的多个交换文件的后缀是不一样的。例如文件名为xxx，第一次缓存为xxx.swp，第二次缓存为xxx.swo，第三次缓存为xxx.swn</strong></em></p>
<p>直接访问&#x2F;index.php.swp获取flag</p>
<p>这里可能你会问：”为什么文件一定叫index.php呀”，这里出现第二个知识点</p>
<p>知识点2：<em><strong>在没有特殊指定主页的情况下，中间件一般将index.php或index.html解析为网站首页</strong></em></p>
<h5 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h5><p>题目描述：<em>cookie 只是一块饼干，不能存放任何隐私数据</em></p>
<p>F12 &#x3D;&gt; 应用程序 &#x3D;&gt; cookie 获得flag，发现flag经过url编码。解码得到flag</p>
<h5 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h5><p>题目描述：<em>域名其实也可以隐藏信息，比如flag.ctfshow.com 就隐藏了一条信息</em></p>
<p>使用命令查看dns解析</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nslookup -qt=txt flag.ctfshow.com</span><br></pre></td></tr></table></figure></div>

<p>但是貌似域名已经死了</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">*** Invalid option: qt=txt</span><br><span class="line">Server:         192.168.139.2</span><br><span class="line">Address:        192.168.139.2#53</span><br><span class="line"></span><br><span class="line">** server can&#x27;t find flag.ctfshow.com: NXDOMAIN</span><br></pre></td></tr></table></figure></div>

<p>nslookup用法参照：<a class="link"   href="https://blog.csdn.net/glmichelin/article/details/113186020" >nslookup命令详解和实战例子（全）_请说明nslookup命令的作用，并举例说明-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h5><p>题目描述：<em>有时候网站上的公开信息，就是管理员常用密码</em></p>
<p>打开dirsearch扫描，结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[04:00:46] 401 -   42B  - /admin/                                           </span><br><span class="line">[04:00:46] 401 -   42B  - /admin/index.php </span><br><span class="line">[04:01:11] 200 -   32B  - /robots.txt </span><br></pre></td></tr></table></figure></div>

<p>访问&#x2F;robots.txt：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /admin/</span><br></pre></td></tr></table></figure></div>

<p>没啥用已经扫出来了，直接访问&#x2F;admin&#x2F;，要求输入用户名密码。在页面翻了一圈找到一个电话：372619038</p>
<p>放到密码的地方试一试，用户名admin。登陆成功，获取flag</p>
<h5 id="webg13"><a href="#webg13" class="headerlink" title="webg13"></a>webg13</h5><p>题目描述：<em>技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码</em></p>
<p>发现网页中存在一个document的链接，点击后发现后台登陆地址和默认密码 ，登陆拿到flag</p>
<h5 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h5><p>题目描述：<em>小0day:某编辑器最新版默认配置下，如果目录不存在，则会遍历服务器根目录。有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人</em></p>
<p>根据题目描述，直接访问&#x2F;editor，发现一个富文本编辑框，点击图片，图片空间，跟着这个路径找到var&#x2F;www&#x2F;html&#x2F;nothinghere&#x2F;fl000g.txt。在浏览器中访问&#x2F;nothinghere&#x2F;fl000g.txt获得flag</p>
<h5 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h5><p>题目描述：<em>公开的信息比如邮箱，可能造成信息泄露，产生严重后果</em></p>
<p>在页面最下方发现一个邮箱：<a class="link"   href="mailto:&#49;&#x31;&#53;&#54;&#54;&#x33;&#49;&#57;&#54;&#x31;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d;" >&#49;&#x31;&#53;&#54;&#54;&#x33;&#49;&#57;&#54;&#x31;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>目前没发现邮箱的作用，所以打开dirsearch扫描，结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[05:02:23] 200 -    1KB - /admin/ </span><br></pre></td></tr></table></figure></div>

<p>访问&#x2F;admin，点击忘记密码，问题“我的所在地是哪个城市？”，联想之前的qq邮箱，通过qq查找位置，（现在好像查不到了，不过根据网上的wp是在西安），输入西安，重置密码，登陆获取flag</p>
<h5 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h5><p>题目描述：<em>对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</em></p>
<p>根据提示，访问&#x2F;tz.php，再其中找到PHPINFO，点击，网页搜索flag，得到flag</p>
<h5 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h5><p>题目描述：<em>备份的sql文件会泄露敏感信息</em></p>
<p>dirsearch扫描，结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[05:15:25] 200 -  934B  - /backup.sql</span><br></pre></td></tr></table></figure></div>

<p>访问下载，在sql文件中得到flag</p>
<h5 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h5><p>题目描述：<em>不要着急，休息，休息一会儿，玩101分给你flag</em></p>
<p>打开容器是个像素小鸟的游戏，超级难玩</p>
<p>没啥思路，dirsearch也没扫出来，那就F12打开控制台，查看js文件的源代码，控制台格式太难看可以复制到vscode，右键格式化文档。在源代码里发现了好东西：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;\u4f60\u8d62\u4e86\uff0c\u53bb\u5e7a\u5e7a\u96f6\u70b9\u76ae\u7231\u5403\u76ae\u770b\u770b&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>confirm函数的作用是在浏览器弹出一个确认框，看内容发现是uniccode编码，解码后得到：<code>你赢了，去幺幺零点皮爱吃皮看看</code></p>
<p>访问&#x2F;110.php，得到flag</p>
<h5 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h5><p>题目描述：<em>密钥什么的，就不要放在前端了</em></p>
<p>一看就是前端泄密，直接F12打开控制台，查看源代码发现加密函数：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">data,key,iv</span>) &#123; <span class="comment">//key,iv：16位的字符串</span></span><br><span class="line">        <span class="keyword">var</span> key1  = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Latin1</span>.<span class="title function_">parse</span>(key);</span><br><span class="line">        <span class="keyword">var</span> iv1   = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Latin1</span>.<span class="title function_">parse</span>(iv);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(data, key1,&#123;</span><br><span class="line">            iv : iv1,</span><br><span class="line">            mode : <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span><br><span class="line">            padding : <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">ZeroPadding</span></span><br><span class="line">        &#125;).<span class="title function_">toString</span>();</span><br></pre></td></tr></table></figure></div>

<p>解释encrypt函数：关键看return部分，我们可以知道：</p>
<ul>
<li>加密方式：AES</li>
<li>运算模式：CBC</li>
<li>填充模式：Zeros</li>
</ul>
<p>看按钮提交时触发的函数：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkForm</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> key = <span class="string">&quot;0000000372619038&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> iv = <span class="string">&quot;ilove36dverymuch&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> pazzword = $(<span class="string">&quot;#pazzword&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">        pazzword = <span class="title function_">encrypt</span>(pazzword,key,iv);</span><br><span class="line">        $(<span class="string">&quot;#pazzword&quot;</span>).<span class="title function_">val</span>(pazzword);</span><br><span class="line">        $(<span class="string">&quot;#loginForm&quot;</span>).<span class="title function_">submit</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>我们可以得到 ：</p>
<ul>
<li>密钥：0000000372619038</li>
<li>偏移：ilove36dverymuch</li>
</ul>
<p>在注释部分可以发现加密后的密文：a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04</p>
<p>接下来解密得到密码，登陆即可获得flag</p>
<p>AES在线加&#x2F;解密：<a class="link"   href="https://www.toolhelper.cn/SymmetricEncryption/AES" >AES 加密&#x2F;解密 - 锤子在线工具 (toolhelper.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h6 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h6><p>题目描述：<em>mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。</em></p>
<p>题目描述一看就是数据库泄密，直接访问默认数据库文件路径：&#x2F;db&#x2F;db.mdb，直接脱裤（当然此处用dirsearch也可以扫出来）</p>
<p>直接通过记事本打开，乱码不要慌，全局搜索flag即可得到</p>
<hr>
<p>2024.10.09 11.53</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>ctf-web</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow刷题笔记-web入门-爆破web21-28</title>
    <url>/2024/10/09/ctfshow%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-web%E5%85%A5%E9%97%A8-%E7%88%86%E7%A0%B4web21-28/</url>
    <content><![CDATA[<h5 id="web21"><a href="#web21" class="headerlink" title="web21"></a>web21</h5><p>题目描述：<em>爆破什么的，都是基操</em></p>
<p>下载题目提供的字典，打开环境，弹出一个登陆框</p>
<p>打开burpsuite，抓包。账户admin，密码123，得到以下的发送数据包：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: f574dda5-1dfd-4efc-8b15-379912447b16.challenge.ctf.show</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Authorization: Basic YWRtaW46MTIz</span><br><span class="line">Sec-Ch-Ua: &quot;Microsoft Edge&quot;;v=&quot;129&quot;, &quot;Not=A?Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;129&quot;</span><br><span class="line">Sec-Ch-Ua-Mobile: ?0</span><br><span class="line">Sec-Ch-Ua-Platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36 Edg/129.0.0.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: https://f574dda5-1dfd-4efc-8b15-379912447b16.challenge.ctf.show/</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line">Priority: u=0, i</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure></div>

<p>找了一圈发现没有我们输入的admin，123或者类似password的关键字啊，推断肯定是加密了。</p>
<p>找到一个普通数据包没有的请求头：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Authorization: Basic YWRtaW46MTIz</span><br></pre></td></tr></table></figure></div>

<p>后面一看还有密文，base64解密之后是admin:123</p>
<p>搞清楚数据包之后，开始爆破。将数据包右键发送到Intruder模块，clear$，选中加密的位置，Add$，切换到payload标签页，在payload settings处导入题目给的字典，在payload processing处添加规则，Add prefix（添加前缀）：<code>admin:</code>，Encode，Base64-encode。为什么添加这两条规则，因为我们需要爆破的是密码，用户名确定的是admin，而且在数据包中是经过Base64编码的。Payload encoding处的勾选要取消，因为base64中会出现等号，勾选会导致爆破失败。配置完成，Start attack。查看不一样长度的返回包，解密后得到admin:shark63</p>
<p>输入账号密码得到flag</p>
<h5 id="web22"><a href="#web22" class="headerlink" title="web22"></a>web22</h5><p>题目描述：<em>域名也可以爆破的，试试爆破这个ctf.show的子域名</em></p>
<p>可以使用OneForAll进行爆破；<a class="link"   href="https://github.com/shmilylty/OneForAll" >https://github.com/shmilylty/OneForAll <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>目前该域名已失效，flag为<code>flag&#123;ctf_show_web&#125;</code></p>
<h5 id="web23"><a href="#web23" class="headerlink" title="web23"></a>web23</h5><p>题目描述：<em>还爆破？这么多代码，告辞！</em></p>
<p>打开题目只有一堆代码（为节省篇幅已删掉注释）：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$token</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>,<span class="number">14</span>,<span class="number">1</span>)===<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>((<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>))+<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>))+<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))/<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">31</span>,<span class="number">1</span>)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>看到这么一长串代码，不要慌，仔细分析。</p>
<p>需要获得flag，需要满足三个条件：</p>
<ol>
<li>传递了名为token的参数</li>
<li>经过 MD5 哈希处理后的<code>token</code>值，其字符串中的第 2 个字符、第 15 个字符和第 18 个字符必须相同</li>
<li>先取出 MD5 后的字符串中的第 2 个字符、第 15 个字符和第 18 个字符，将它们转换为整数。计算这三个字符对应的整数值之和，再除以第 2 个字符对应的整数值，结果必须等于 MD5 后的字符串中的第 32 个字符对应的整数值。</li>
</ol>
<p>只需要根据这三个条件编写脚本就可以实现爆破，这里我用python编写脚本：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">    token = <span class="built_in">str</span>(i)</span><br><span class="line">    md5_token = hashlib.md5(token.encode()).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> md5_token[<span class="number">1</span>] == md5_token[<span class="number">14</span>] <span class="keyword">and</span> md5_token[<span class="number">14</span>] == md5_token[<span class="number">17</span>]:</span><br><span class="line">        char2 = <span class="built_in">int</span>(md5_token[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        char15 = <span class="built_in">int</span>(md5_token[<span class="number">14</span>], <span class="number">16</span>)</span><br><span class="line">        char18 = <span class="built_in">int</span>(md5_token[<span class="number">17</span>], <span class="number">16</span>)</span><br><span class="line">        char32 = <span class="built_in">int</span>(md5_token[<span class="number">31</span>], <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> (char2 + char15 + char18) / char2 == char32:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Found token: <span class="subst">&#123;token&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<p>运行脚本，得到tooken：422</p>
<p><strong>知识点1</strong>：php函数substr()用于字符串切片，三个参数分别是切片的字符串，从哪里开始切（下标），切几个字符</p>
<p><strong>知识点2</strong>：php函数intval()将字符串转换为int整数类型</p>
<h5 id="web24"><a href="#web24" class="headerlink" title="web24"></a>web24</h5><p>题目描述：<em>爆个🔨</em></p>
<p>打开题目依旧爆出一堆代码和一串字符：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">if(isset($_GET[&#x27;r&#x27;]))&#123;</span><br><span class="line">    $r = $_GET[&#x27;r&#x27;];</span><br><span class="line">    mt_srand(372619038);</span><br><span class="line">    if(intval($r)===intval(mt_rand()))&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    echo system(&#x27;cat /proc/version&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt; Linux version 5.4.0-163-generic (buildd@lcy02-amd64-067) (gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.2)) #180-Ubuntu SMP Tue Sep 5 13:21:23 UTC 2023 Linux version 5.4.0-163-generic (buildd@lcy02-amd64-067) (gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.2)) #180-Ubuntu SMP Tue Sep 5 13:21:23 UTC 2023</span><br></pre></td></tr></table></figure></div>

<p>这段代码的意思很简单，如果传入的参数和随机数相等就输出flag，否则执行<code>cat /proc/version</code></p>
<p>所以解决这道题我们只需要知道<code>intval(mt_rand())</code>的值是多少就可以了，用php编写一下代码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">372619038</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>得出答案：1155388967（这里我用的是php7.3.4）用其他大版本的php输出的答案可能不一样</p>
<p>传入参数&#x2F;?r&#x3D;1155388967，得到flag</p>
<p><strong>知识点1</strong>：<code>mt_srand()</code>是 PHP 中的随机数生成器初始化函数，用于设置随机数生成器的种子值。</p>
<p><strong>知识点2</strong>：<code>mt_rand()</code>生成一个随机整数。</p>
<h5 id="web25"><a href="#web25" class="headerlink" title="web25"></a>web25</h5><p>题目描述：<em>爆个🔨，不爆了</em></p>
<p>打开题目一堆代码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="title function_ invoke__">hexdec</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>), <span class="number">0</span>,<span class="number">8</span>)));</span><br><span class="line">    <span class="variable">$rand</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$r</span>)-<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line">    <span class="keyword">if</span>((!<span class="variable">$rand</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>]==(<span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$rand</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>分析代码，准备些破解脚本，发现写不出来。这里的种子我们不知道，因为种子生成需要flag。</p>
<p>既然正向无法分析，我们可以通过逆向思维先得到mt_rand()的值。传入参数&#x2F;?r&#x3D;0，页面输出：-319805724</p>
<p>现在我们需要爆破种子，这里用到一个脚本：<a class="link"   href="https://github.com/openwall/php_mt_seed" >openwall&#x2F;php_mt_seed: PHP mt_rand() seed cracker (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>打开kali，下载对应的脚本并且解压，进入目录，输入make编译文件，接着执行命令：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">./php_mt_seed 319805724 </span><br></pre></td></tr></table></figure></div>

<p>这里的319805724替换成你自己页面输出的值，注意要去掉负号，因为：<code>$rand = intval($r)-intval(mt_rand());</code>你传的r是0，输出的是$rand，mt_rand()是被减的，所以去掉负号。</p>
<p>执行结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pattern: EXACT</span><br><span class="line">Version: 3.0.7 to 5.2.0</span><br><span class="line">Found 0, trying 0xfc000000 - 0xffffffff, speed 8808.0 Mseeds/s  </span><br><span class="line">Version: 5.2.1+</span><br><span class="line">Found 0, trying 0x18000000 - 0x19ffffff, speed 68.7 Mseeds/s ^[[B^[[B^[[B^[[BFound 0, trying 0x4a000000 - 0x4bffffff, speed 67.8 Mseeds/s </span><br><span class="line">seed = 0x4b0641bb = 1258701243 (PHP 5.2.1 to 7.0.x; HHVM)</span><br><span class="line">seed = 0x4b0641bb = 1258701243 (PHP 7.1.0+)</span><br><span class="line">Found 2, trying 0x9e000000 - 0x9fffffff, speed 67.7 Mseeds/s </span><br><span class="line">seed = 0x9e78f846 = 2658728006 (PHP 7.1.0+)</span><br><span class="line">Found 3, trying 0xa8000000 - 0xa9ffffff, speed 67.3 Mseeds/s </span><br><span class="line">seed = 0xa8f195e2 = 2834404834 (PHP 7.1.0+)</span><br><span class="line">Found 4, trying 0xba000000 - 0xbbffffff, speed 67.2 Mseeds/s </span><br><span class="line">seed = 0xbb568297 = 3143008919 (PHP 7.1.0+)</span><br><span class="line">Found 5, trying 0xfe000000 - 0xffffffff, speed 67.0 Mseeds/s </span><br><span class="line">Found 5</span><br></pre></td></tr></table></figure></div>

<p>找到五个种子，这里我们选择7.1+版本（如果你装了wappalyzer插件你就知道靶场的php版本是7.3.11）的，即0x4b0641bb。</p>
<p>接下来逐一满足代码中的两个if条件拿到flag</p>
<p>编写一个php脚本来获取我们需要的值：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">0x4b0641bb</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;[*]参数处传入的值：&quot;</span>.<span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;[*]cookie处设置的值：&quot;</span>.(<span class="title function_ invoke__">mt_rand</span>() + <span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>得到结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*]参数处传入的值：319805724</span><br><span class="line">[*]cookie处设置的值：556463077</span><br></pre></td></tr></table></figure></div>

<p>传入参数&#x2F;?r&#x3D;319805724，打开控制台，应用程序，设置cookie名token，值556463077，刷新页面获得flag</p>
<p><strong>知识点1</strong>：只要生成随机数的种子一样，也就是mt_srand的参数一样，每次生成的随机数无论在什么时间或环境中运行顺序和值都是一样的</p>
<p><strong>注意</strong>：这道题有个很ex的地方，用php_mt_seed工具可能爆出很多个种子，一个不行就换几个试，因为你不知道题目里的种子是哪个。我就是在这里坐牢了很久。。。</p>
<h5 id="web26"><a href="#web26" class="headerlink" title="web26"></a>web26</h5><p>题目描述：<em>这个可以爆</em></p>
<p>打开题目，点击确认，之后是一个数据库配置页面。不知道如何下手，点击安装，发现提示连接成功了。</p>
<p>抓个包，点击安装，发现返回数据包里有flag</p>
<h5 id="web27"><a href="#web27" class="headerlink" title="web27"></a>web27</h5><p>题目描述：<em>CTFshow菜鸡学院招生啦！</em></p>
<p>打开是一个教务管理系统的登陆页面，有个录取名单下载打开（用Excel），得到以下内容：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1	高先伊	WEB	621022********5237	</span><br><span class="line">2	嵇开梦	MISC	360730********7653	党员</span><br><span class="line">3	郎康焕	RE	522601********8092	</span><br><span class="line">4	元羿谆	PWN	451023********3419	生源地贷款</span><br><span class="line">5	祁落兴	CRYPTO	410927********5570	</span><br></pre></td></tr></table></figure></div>

<p>还有一个链接是学籍管理系统，打开需要姓名和身份证，选一个来爆破，我这里就找嵇开梦同学来爆破了</p>
<p>打开学籍管理系统，输入姓名：嵇开梦，身份证号码随便输，挂代理，抓包。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=%E5%B5%87%E5%BC%80%E6%A2%A6&amp;p=360730200001017653</span><br></pre></td></tr></table></figure></div>

<p>发现身份证并没有加密，右键，发送到Intruder，身份证位置添加$，到payload标签页，payload sets设置为Datas，日期选择1990.1.1到2024.10.10，Format格式为：yyyyMMdd，Payload Processing处设置规则：Add prefix：360730，Add suffix：7653，Start attack，找到Length不一样的一个，得到完整身份证号码为：360730199110167653。在学籍管理系统输入姓名和身份证号，得到学号为10167653，初始密码为身份证号，返回登陆界面，登陆获得flag</p>
<h4 id="web28"><a href="#web28" class="headerlink" title="web28"></a>web28</h4><p>题目描述：<em>大海捞针</em></p>
<p>题目打开只有一句：web28:where is flag?</p>
<p>但是目录有意思：&#x2F;0&#x2F;1&#x2F;2.txt</p>
<p>估计就是爆破目录了</p>
<p>抓包，右键，发送到Intruder，在0和1的位置添加$，并且删除2.txt，所以你请求头的第一行是这样的：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /§0§/§1§/ HTTP/1.1</span><br></pre></td></tr></table></figure></div>

<p>Attach type模式选择Cluster bomb，因为我们两个地方要分开爆破（在position标签页），来到payloads标签，注意这里payload set有1和2，配置过程一样，Payload type选择Numbers，Payload settings，To的值填100，start attack，得到flag。</p>
<hr>
<p>2024.10.10 21:59</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>ctf-web</tag>
      </tags>
  </entry>
</search>
